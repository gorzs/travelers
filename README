##Homeowners Assistant Bot

 This is a local-first, conversational assistant designed to help homeowners quickly access useful information
 such as emergency contact numbers, utility services, and home maintenance tips, with a basic conversational memory
 and retrieving the information from different sources (json and txt).

 How it works:
     ->Vector Search (RAG):
         Uses SentenceTransformers to convert stored data (contacts/tips) into semantic vectors.
         Compares the user query to those vectors using cosine similarity.

     ->LLM Integration (OpenAI):
         The most relevant knowledge is injected into a prompt.
         A GPT-3.5 model generates a human-like response for a smooth interaction.

Built with:

    LangChain
    OpenAI API
    SentenceTransformers

##Project Structure
        homeowners_bot/business_knowledge/homeowner_contacts.json # Emergency and utility contacts
        homeowners_bot/business_knowledge/maintenance_tips.txt  # Practical tips for home maintenance
        homeowners_bot.py #Main bot script
        requirements.txt # Dependencies for the project
        env # Contains the OpenAI API Key
        README.md # This file :)

##Setup Instructions
1. Unzip the project
2. Create a virtual environment
    python -m venv .venv
    source .venv/bin/activate   # On Windows: .venv\Scripts\activate
3. Install dependencies
    pip install -r requirements.txt
4. Run the script with:
    python homeowners_bot.py

    ->Then ask things like:

        "What's the number for the fire department?"
        "Who do I call for gas leaks?"
        "Give me a few maintenance tips for the roof"
    ->To exit, type something like bye, quit, or goodbye.


##Additional notes

I’m sharing the Python notebook (Homeowner_bot.ipynb), which contains the full implementation of the Homeowners Assistant Bot.
You’ll find the complete execution history and outputs, which serve as evidence of its functionality and how the assistant handles various user queries.

##What you’d do next with more time?

1. I'd switch to a Vector Store (like FAISS or Chroma) via LangChain for better retrieval performance.
2. Add pytest or unittest cases for the core logic.
3. Host the app on AWS with API Gateway to expose an endpoint and package the Python code into an AWS Lambda function.
   We could call this API from a mobile app, chatbot frontend, or Slack integration.